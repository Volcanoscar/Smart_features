/*
  * Generated by smali2java 1.0.0.558
  * Copyright (C) 2013 Hensence.com
  */

package com.android.factory;

import android.view.View;
import android.content.Context;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.content.res.Resources;
import android.util.DisplayMetrics;
import android.graphics.Canvas;
import android.view.MotionEvent;
import android.util.Log;
import android.graphics.Bitmap;
import android.app.Activity;
import android.preference.PreferenceManager;
import android.content.SharedPreferences;
import android.view.WindowManager;
import android.os.Bundle;
import android.graphics.Path;
import android.graphics.RectF;
import android.graphics.Color;
import android.view.ViewConfiguration;
import android.view.KeyCharacterMap;
import android.view.KeyEvent;

///Tim add for ENXDI-51 @{
import android.view.Display;
import java.lang.reflect.Method;
///Tim add end @}
public class TPTest extends Activity {
	int CameraTestStatus1;
	int CameraTestStatus2;
	int CameraTestStatus3;
	int CameraTestStatus4;
	int CameraTestStatus5;
	int alpha;
	int centerX;
	int centerY;
	int innerCircle;
	int point_x;
	int point_y;
	int radius;
	int ringWidth;
	boolean upFlag;
	private int SCREEN_WIDTH = 480;
	private int SCREEN_HEIGHT = 854;

	private FloatPoint circlePoint1, circlePoint2, circlePoint3, circlePoint4,
			circlePoint5;

	public TPTest() {
		CameraTestStatus1 = 0x0;
		CameraTestStatus2 = 0x0;
		CameraTestStatus3 = 0x0;
		CameraTestStatus4 = 0x0;
		CameraTestStatus5 = 0x0;
		radius = 0x0;
		alpha = 0xff;
		upFlag = false;
	}

	static int CameraTestStatus = 0x0;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().addFlags(0x80);
		requestWindowFeature(0x1);
		getWindow().setFlags(0x400, 0x400);
		WindowManager wm = (WindowManager) this
				.getSystemService(Context.WINDOW_SERVICE);

		initPosition();

		View TPTest_FULL = new RingView(TPTest.this, TPTest.this);
		/*
		 * zouguanbo 20150819 modify begin for Jria LO-30 match 720P and
		 * navigation
		 */
		// TPTest_FULL.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
		int flag = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
				| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
				| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
				| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
				| View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
				| View.SYSTEM_UI_FLAG_IMMERSIVE
				| View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED;
		TPTest_FULL.setSystemUiVisibility(flag);
		/*
		 * zouguanbo 20150819 modify begin for Jria LO-30 match 720P and
		 * navigation
		 */
		setContentView(TPTest_FULL);
		// add & modefy by lilong end,20140715
	}

	///Tim add for ENXDI-51 @{
	private int getRealDisplayHeight(){
        int dpi = 0;
        Display display = getWindowManager().getDefaultDisplay();
        DisplayMetrics dm = new DisplayMetrics();
        @SuppressWarnings("rawtypes")
        Class c;
        try {
            c = Class.forName("android.view.Display");
            @SuppressWarnings("unchecked")
                        Method method = c.getMethod("getRealMetrics",DisplayMetrics.class);
            method.invoke(display, dm);
            dpi=dm.heightPixels;
        }catch(Exception e){
            e.printStackTrace();
        } 
        return dpi;
    
	}
	///Tim add end @}
	
	private void initPosition() {
		
		SCREEN_WIDTH = getResources().getDisplayMetrics().widthPixels;
		///Tim modify for ENXDI-51 @{
        //SCREEN_HEIGHT = getResources().getDisplayMetrics().heightPixels;
		SCREEN_HEIGHT = getRealDisplayHeight();
		///Tim modify end @}
		centerX = SCREEN_WIDTH / 2;
		centerY = SCREEN_HEIGHT / 2;

		circlePoint1 = new FloatPoint(centerX, centerY / 3.0f);
		circlePoint2 = new FloatPoint(centerX / 3.0f, centerY);
		circlePoint3 = new FloatPoint(centerX, centerY);
		circlePoint4 = new FloatPoint(centerX * 5.0f / 3, centerY);
		circlePoint5 = new FloatPoint(centerX, centerY * 5.0f / 3);
	}

	protected void onPause() {
		super.onPause();
		finish();
	}

	public void onBackPressed() {
		CameraTestStatus = -0x1;
		onPause();
	}

	class RingView extends View {
		private Context mcontext = null;
		private final Paint paint1;
		private final Paint paint2;
		private final Paint paint3;
		private final Paint paint4;
		private final Paint paint5;

		public RingView(TPTest p1, Context context) {
			this(p1, context, null);
		}

		public RingView(TPTest p1, Context context, AttributeSet attrs) {
			super(context, attrs);
			mcontext = context;
			paint1 = new Paint();
			paint1.setARGB(0x9b, 0xa7, 0xbe, 0xce);
			paint1.setAntiAlias(true);
			paint1.setStyle(Paint.Style.STROKE);
			paint1.setStrokeWidth(0.0f);
			paint2 = new Paint();
			paint2.setARGB(0x9b, 0xa7, 0xbe, 0xce);
			paint2.setAntiAlias(true);
			paint2.setStyle(Paint.Style.STROKE);
			paint2.setStrokeWidth(0.0f);
			paint3 = new Paint();
			paint3.setARGB(0x9b, 0xa7, 0xbe, 0xce);
			paint3.setAntiAlias(true);
			paint3.setStyle(Paint.Style.STROKE);
			paint3.setStrokeWidth(0.0f);
			paint4 = new Paint();
			paint4.setARGB(0x9b, 0xa7, 0xbe, 0xce);
			paint4.setAntiAlias(true);
			paint4.setStyle(Paint.Style.STROKE);
			paint4.setStrokeWidth(0.0f);
			paint5 = new Paint();
			paint5.setARGB(0x9b, 0xa7, 0xbe, 0xce);
			paint5.setAntiAlias(true);
			paint5.setStyle(Paint.Style.STROKE);
			paint5.setStrokeWidth(0.0f);
		}

		protected void onDraw(Canvas canvas) {
			innerCircle = dip2px(mcontext, 33.0f);
			ringWidth = dip2px(mcontext, 5.0f);
			alpha = (alpha - 0x3);
			canvas.drawColor(-0x777778);
			Paint paint = new Paint();
			paint.setColor(-0x1);
			paint.setAlpha(alpha);
			paint.setStyle(Paint.Style.FILL);
			paint.setAntiAlias(true);
			if (upFlag) {
				radius = (radius + 0x1);
				if (radius > 0x1a) {
					upFlag = false;
					radius = 0x0;
					alpha = 0xff;
				}
				if (radius == 0x12) {
					alpha = 0x64;
				}
				canvas.drawCircle((float) point_x, (float) point_y,
						(float) radius, paint);
				invalidate();
			}
			
			canvas.drawCircle(circlePoint1.x, circlePoint1.y,(float) innerCircle, paint1);
			canvas.drawCircle(circlePoint2.x, circlePoint2.y,(float) innerCircle, paint2);
			canvas.drawCircle(circlePoint3.x, circlePoint3.y,(float) innerCircle, paint3);
			canvas.drawCircle(circlePoint4.x, circlePoint4.y,(float) innerCircle, paint4);
			canvas.drawCircle(circlePoint5.x, circlePoint5.y,(float) innerCircle, paint5);
			super.onDraw(canvas);

			if ((CameraTestStatus1 == 0x1) && (CameraTestStatus2 == 0x1)
					&& (CameraTestStatus3 == 0x1) && (CameraTestStatus4 == 0x1)
					&& (CameraTestStatus5 == 0x1)) {
				try {// starmen add
						// add by lilong begin,20140715
					Log.v("StarmenOp", "onDraw,SimpleView6");
					View SimpleView_full = new BrushView(TPTest.this);
					/*
					 * zouguanbo 20150819 modify begin for Jria LO-30 match 720P
					 * and navigation
					 */
					// SimpleView_full.setSystemUiVisibility(View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED);
					int flag = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
							| View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
							| View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
							| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav
																	// bar
							| View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
							| View.SYSTEM_UI_FLAG_IMMERSIVE
							| View.SYSTEM_UI_FLAG_IMMERSIVE_GESTURE_ISOLATED;
					SimpleView_full.setSystemUiVisibility(flag);
					/*
					 * zouguanbo 20150819 modify end for Jria LO-30 match 720P
					 * and navigation
					 */
					// add by lilong end,20140715
					// starmen move to here
					setContentView(SimpleView_full); // modefy by
														// lilong,20140715
				} catch (NullPointerException e) {
					Log.e("Starmen", "NullPointerException is happen");
				}
			}
			// starmen move to here end
		}

		public boolean onTouchEvent(MotionEvent event) {
			point_x = (int) event.getX();
			point_y = (int) event.getY();
			if (event.getAction() == 0x1) {
				upFlag = true;
			}
			float X = event.getX();
			float Y = event.getY();
			if (circlePoint1.getDistance(X,Y) <= innerCircle) {
				CameraTestStatus1 = 0x1;
				paint1.setColor(-0xff0100);
			} else if (circlePoint2.getDistance(X,Y) <= innerCircle) {
				CameraTestStatus2 = 0x1;
				paint2.setColor(-0xff0100);
			} else if (circlePoint3.getDistance(X,Y) <= innerCircle) {
				CameraTestStatus3 = 0x1;
				paint3.setColor(-0xff0100);
			} else if (circlePoint4.getDistance(X,Y) <= innerCircle) {
				CameraTestStatus4 = 0x1;
				paint4.setColor(-0xff0100);
			} else if (circlePoint5.getDistance(X,Y) <= innerCircle) {
				CameraTestStatus5 = 0x1;
				paint5.setColor(-0xff0100);
			}
			invalidate();
			return true;
		}
	}

	public int dip2px(Context context, float dpValue) {
		float scale = context.getResources().getDisplayMetrics().density;
		return (int) ((dpValue * scale) + 0.5f);
	}

	protected void onDestroy() {
		super.onDestroy();
	}

	protected void onResume() {
		super.onResume();
		CameraTestStatus = -0x1;
	}

	class BrushView extends View {
		private Paint brush = new Paint();
		private Path path = new Path();
		private int count = 0;
		private int countchange = 0;
		private RectF rectangle[];
		private int flag[];
		
		private float horizontal_margin;
		private float vertical_margin;
		
		float width_px, height_px;

		private int widthcount = 9;
		private int heightcount = 13;

		public BrushView(Context context) {
			super(context);
			brush.setAntiAlias(true);
			brush.setColor(Color.RED);
			brush.setStyle(Paint.Style.STROKE);
			brush.setStrokeWidth(8f);
			
			width_px = (SCREEN_WIDTH/(float)widthcount - 1.3f);
			height_px = (SCREEN_HEIGHT/(float)heightcount  - 1.3f);
			
			horizontal_margin = (SCREEN_WIDTH - width_px*widthcount)/(widthcount+1);
			vertical_margin = (SCREEN_HEIGHT - height_px*heightcount)/(heightcount+1);
			
			rectangle = new RectF[widthcount * heightcount];
			flag = new int[widthcount * heightcount];
		}

		@Override
		public boolean onTouchEvent(MotionEvent event) {
			float pointX = event.getX();
			float pointY = event.getY();
			onTouchRectangle(pointX, pointY);
			// Checks for the event that occurs
			switch (event.getAction()) {
			case MotionEvent.ACTION_DOWN:
				path.moveTo(pointX, pointY);
				return true;
			case MotionEvent.ACTION_MOVE:
				path.lineTo(pointX, pointY);
				break;
			case MotionEvent.ACTION_UP:
				if (countchange == count && countchange != 0) {
					finish();
				}
				break;
			default:
				return false;
			}
			postInvalidate();
			return false;

		}

		public void onTouchRectangle(float pointX, float pointY) {

			count = 0;
			for (int i = 0; i <= rectangle.length - 1; i++) {
				if (i % widthcount == 0 || i / widthcount == 0
						|| i % widthcount == widthcount - 1
						|| i / widthcount == heightcount - 1
						|| i % widthcount == (int) ((widthcount + 1) / 2 - 1)
						|| i / widthcount == (int) ((heightcount + 1) / 2 - 1)) {
					float y = rectangle[i].top;
					float x = rectangle[i].left;
					if (pointX >= x && pointX <= (x + width_px) && pointY >= y
							&& pointY <= (y + height_px) && flag[i] == 0) {
						flag[i] = 1;
						countchange++;
					}
					count++;
				}
			}
		}

		@Override
		protected void onDraw(Canvas canvas) {
			canvas.drawPath(path, brush);
			Paint paint = new Paint();
			paint.setStrokeCap(Paint.Cap.ROUND);
			paint.setStrokeWidth(3);
			for (int i = 0; i <= rectangle.length - 1; i++) {
				if (i % widthcount == 0 || i / widthcount == 0
						|| i % widthcount == widthcount - 1
						|| i / widthcount == heightcount - 1
						|| i % widthcount == (int) ((widthcount + 1) / 2 - 1)
						|| i / widthcount == (int) ((heightcount + 1) / 2 - 1)) {
					if (flag[i] == 0) {
						paint.setColor(Color.WHITE);
						float xaxis = horizontal_margin + (width_px + horizontal_margin)
								* (i % widthcount);
						float yaxis = vertical_margin + (height_px + vertical_margin)
								* (i / widthcount);
						rectangle[i] = new RectF(xaxis, yaxis,
								xaxis + width_px, yaxis + height_px);

						canvas.drawRect(rectangle[i], paint);

					} else if (flag[i] == 1) {
						paint.setColor(Color.GREEN);
						canvas.drawRect(rectangle[i], paint);
					}
				}
			}
		}
	}

	private class FloatPoint {
		float x;
		float y;

		public FloatPoint(float a, float b) {
			x = a;
			y = b;
		}

		public double getDistance(FloatPoint p) {
			double _x = Math.abs(this.x - p.x);
			double _y = Math.abs(this.y - p.y);
			return Math.sqrt(_x * _x + _y * _y);
		}
		
		public double getDistance(float a, float b) {
			double _x = Math.abs(this.x - a);
			double _y = Math.abs(this.y - b);
			return Math.sqrt(_x * _x + _y * _y);
		}
	}
}
